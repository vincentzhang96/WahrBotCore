package com.divinitor.discord.wahrbot.core.command;

public interface CommandRegistry extends Command {

    /**
     * Executes a command for the given command line, if valid.
     * @param context The command execution context
     * @return The result of the command
     */
    CommandResult invoke(CommandContext context);

    /**
     * Sets the parent of this command registry. Used for subcommand chaining
     * @param parent The new parent of this registry, or null if this will be a root registry
     * @throws IllegalArgumentException If a cyclical graph is created
     */
    void setParent(CommandRegistry parent) throws IllegalArgumentException;

    /**
     * Gets this registry's parent, or null if this is a root registry.
     * @return This registry's parent or null
     */
    CommandRegistry getParent();

    /**
     * @return If this registry is a root registry
     */
    default boolean isRoot() {
        return this.getParent() == null;
    }

    /**
     * Gets the command for the given command line and context.
     * @param commandLine The command line
     * @param context The command execution context
     * @return The command that matches the command line and context, or null if no match
     */
    Command getCommandFor(CommandLine commandLine, CommandContext context);

    /**
     * Determines whether or not the given command line in the given context can be executed.
     * @param commandLine The command line
     * @param context The command execution context
     * @return True if the execution would be allowed, false otherwise.
     */
    boolean hasPermissionFor(CommandLine commandLine, CommandContext context);

    /**
     * Sets the default command to be executed if no subcommands are specified. Cannot be set on the root registry. By
     * default this will be the autogenerated help command.
     * @param command The command to be executed by default if no subcommands are specified.
     */
    void setDefaultCommand(Command command);

    /**
     * Register a command to this command registry. Its full command path will be a space separated list of the registry
     * path followed by the resolved command locale key.
     * @param command The command to register
     * @param commandKey The command's identifier key and base locale key
     */
    void registerCommand(Command command, String commandKey);

    /**
     * Removes a command from this command registry by its key.
     * @param commandKey The command's identifier key.
     */
    void unregisterCommand(String commandKey);

    /**
     * Checks if a command under the given command key is registered or not.
     * @param commandKey The command key to look up
     * @return Whether or not a command under the given command key is registered or not
     */
    boolean hasCommand(String commandKey);

    /**
     * Get a child command registry at the given name key.
     * @param registryNameKey
     * @return
     */
    CommandRegistry getChild(String registryNameKey);

    /**
     * Gets the command registry invocation chain required, e.g. ".dn tracker blessbuff", that this registry is at.
     * This can be considered this registry's command "path."
     * @param context The command invocation context.
     * @return This registry's invocation chain.
     */
    String getCommandNameChain(CommandContext context);

    /**
     * Creates child registries according to the given keys as a path. If a child registry exists, it is not
     * overwritten.
     *
     * For example, calling makeRegistries("foo", "bar", "baz") will create the registry chain "foo bar baz" under this
     * registry (assuming that foo, bar, and baz resolve to their names in the localization) and return the baz registry
     *
     * @param keys A list of keys, forming the registry path
     * @return The bottommost registry
     */
    CommandRegistry makeRegistries(String... keys);


    void setUserPermissionConstraints(CommandConstraint<CommandContext> constraint);
    void setBotPermissionConstraints(CommandConstraint<CommandContext> constraint);
    void setOtherConstraints(CommandConstraint<CommandContext> constraint);
}
